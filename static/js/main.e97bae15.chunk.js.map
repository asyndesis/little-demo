{"version":3,"sources":["components/UserStatus.js","App.js","serviceWorker.js","index.js"],"names":["UserStatus","props","user","imgUrl","status","lineOne","lineTwo","React","useState","width","setWidth","refContainer","useRef","useEffect","handleResize","current","getBoundingClientRect","window","addEventListener","removeEventListener","className","ref","hideClass","statusClass","src","alt","renderMedia","App","style","type","min","value","onChange","e","target","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAoDeA,EAjDI,SAAAC,GACjB,IAD0B,EAEmBA,EAAMC,KAA3CC,EAFkB,EAElBA,OAAQC,EAFU,EAEVA,OAAQC,EAFE,EAEFA,QAASC,EAFP,EAEOA,QAFP,EAGAC,IAAMC,SAAS,GAHf,mBAGnBC,EAHmB,KAGZC,EAHY,KAIpBC,EAAeJ,IAAMK,OAAO,GAElCL,IAAMM,WAAU,WACd,SAASC,IACHH,GACFD,EAASC,EAAaI,QAAQC,wBAAwBP,OAI1D,OAFAK,IACAG,OAAOC,iBAAiB,SAAUJ,GAC3B,WACLG,OAAOE,oBAAoB,SAAUL,OAezC,OACE,yBAAKM,UAAU,mBAAmBC,IAAKV,GAZrB,SAAAV,GAClB,IAAMqB,EAAYb,EAlBF,IAkBsB,MAAQ,QACxCc,EAAyB,WAAXnB,EAAsB,SAAW,UACrD,OACE,yBAAKgB,UAAW,qBAAuBE,GACrC,yBAAKF,UAAU,qBAAqBI,IAAKrB,EAAQsB,IAAKxB,EAAMI,UAC5D,yBAAKe,UAAW,oBAAsBG,KAOvCG,CAAYzB,GACb,yBAAKmB,UAAU,oBACb,4BAAKf,GACL,2BAAIC,M,MCRGqB,MAzBf,WACE,IADa,EAOapB,IAAMC,SAAS,OAP5B,mBAONC,EAPM,KAOCC,EAPD,KAQb,OACE,yBAAKU,UAAU,OACb,yBAAKA,UAAU,QAAQQ,MAAO,CAAEnB,MAAOA,IACrC,kBAAC,EAAD,CAAYP,KAVL,CACXC,OAAQ,wCACRC,OAAQ,SACRC,QAAS,iBACTC,QAAS,mBAQP,2BAAOc,UAAU,SAAjB,8BACA,2BACEA,UAAU,aACVS,KAAK,OACLC,IAAI,IACJC,MAAOtB,EACPuB,SAAU,SAAAC,GAAC,OAAIvB,EAASuB,EAAEC,OAAOH,YCXrBI,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e97bae15.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst UserStatus = props => {\n  const hideWidth = 160;\n  const { imgUrl, status, lineOne, lineTwo } = props.user;\n  const [width, setWidth] = React.useState(0);\n  const refContainer = React.useRef(0);\n\n  React.useEffect(() => {\n    function handleResize() {\n      if (refContainer)\n        setWidth(refContainer.current.getBoundingClientRect().width);\n    }\n    handleResize(); //ToDo: Probably a better way to trigger this on first render.\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  const renderMedia = props => {\n    const hideClass = width > hideWidth ? \"big\" : \"small\";\n    const statusClass = status === \"online\" ? \"online\" : \"offline\";\n    return (\n      <div className={\"user-status-media \" + hideClass}>\n        <img className=\"user-status-avatar\" src={imgUrl} alt={props.lineOne} />\n        <div className={\"user-status-icon \" + statusClass}></div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"user-status-wrap\" ref={refContainer}>\n      {renderMedia(props)}\n      <div className=\"user-status-body\">\n        <h3>{lineOne}</h3>\n        <p>{lineTwo}</p>\n      </div>\n    </div>\n  );\n};\n\nUserStatus.propTypes = {\n  user: PropTypes.shape({\n    imgUrl: PropTypes.string,\n    status: PropTypes.string,\n    lineOne: PropTypes.string,\n    lineTwo: PropTypes.string\n  })\n};\n\nexport default UserStatus;\n","import React from \"react\";\nimport UserStatus from \"./components/UserStatus\";\nimport \"./App.scss\";\n\nfunction App() {\n  const user = {\n    imgUrl: \"http://trevorbonomi.com/img/trebs.jpg\",\n    status: \"online\",\n    lineOne: \"Harry Robinson\",\n    lineTwo: \"Online | 14h\"\n  };\n  const [width, setWidth] = React.useState(\"50%\");\n  return (\n    <div className=\"App\">\n      <div className=\"clamp\" style={{ width: width }}>\n        <UserStatus user={user} />\n      </div>\n      <label className=\"label\">Enter in percent or pixels</label>\n      <input\n        className=\"input-text\"\n        type=\"text\"\n        min=\"0\"\n        value={width}\n        onChange={e => setWidth(e.target.value)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}